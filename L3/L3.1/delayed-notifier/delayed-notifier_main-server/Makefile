# ========================
# Setup
# ========================

ENV_FILE ?= .env
ifneq (,$(wildcard $(ENV_FILE)))
include $(ENV_FILE)
export ENV PROJECT_NAME
endif

ifeq ($(OS),Windows_NT)
	MAKE_CMD = mingw32-make
else
	MAKE_CMD = make
endif

# ========================
# ALL
# ========================

all-up:
	$(MAKE_CMD) all-deps-up
	@sleep 3
	$(MAKE_CMD) app-up

all-deps-up: redis-up rabbitmq-up promtail-up loki-up grafana-up

all-rm: app-rm

all-down: app-down

# ========================
# APP
# ========================

APP = providers/app

.PHONY: app-local-build app-local-up app-local-build-up app-up app-logs app-stop app-restart app-rm app-down app-ps app-exec

app-local-build:
	$(MAKE_CMD) -C $(APP) local-build
app-local-up:
	$(MAKE_CMD) -C $(APP) local-up ARGS="$(ARGS)"
app-local-build-up:
	$(MAKE_CMD) -C $(APP) local-build-up ARGS="$(ARGS)"
app-up:
	$(MAKE_CMD) -C $(APP) up
app-logs:
	$(MAKE_CMD) -C $(APP) logs
app-stop:
	$(MAKE_CMD) -C $(APP) stop
app-restart:
	$(MAKE_CMD) -C $(APP) restart
app-rm:
	$(MAKE_CMD) -C $(APP) rm
app-down:
	$(MAKE_CMD) -C $(APP) down
app-ps:
	$(MAKE_CMD) -C $(APP) ps
app-exec:
	$(MAKE_CMD) -C $(APP) exec

# ========================
# MIGRATE
# ========================

MIGRATE = providers/migrate

migrate-create:
	$(MAKE_CMD) -C $(MIGRATE) create
migrate-up:
	$(MAKE_CMD) -C $(MIGRATE) up
migrate-down:
	$(MAKE_CMD) -C $(MIGRATE) down


# ========================
# POSTGRES
# ========================

POSTGRES = providers/postgres

# Default target
postgres-help:
	$(MAKE_CMD) -C $(POSTGRES) help
# Basic Cluster Operations
postgres-up:
	$(MAKE_CMD) -C $(POSTGRES) up
postgres-up-async:
	$(MAKE_CMD) -C $(POSTGRES) up-async
postgres-up-sync-all:
	$(MAKE_CMD) -C $(POSTGRES) up-sync-all
postgres-up-sync-one:
	$(MAKE_CMD) -C $(POSTGRES) up-sync-one
postgres-down:
	$(MAKE_CMD) -C $(POSTGRES) down
postgres-restart:
	$(MAKE_CMD) -C $(POSTGRES) restart
postgres-status:
	$(MAKE_CMD) -C $(POSTGRES) status
postgres-status-sync:
	$(MAKE_CMD) -C $(POSTGRES) status-sync
postgres-logs:
	$(MAKE_CMD) -C $(POSTGRES) logs
postgres-setup:
	$(MAKE_CMD) -C $(POSTGRES) setup
postgres-check:
	$(MAKE_CMD) -C $(POSTGRES) check
postgres-clean:
	$(MAKE_CMD) -C $(POSTGRES) clean
postgres-purge:
	$(MAKE_CMD) -C $(POSTGRES) purge
# Replication Mode Management
postgres-mode-async:
	$(MAKE_CMD) -C $(POSTGRES) mode-async
postgres-mode-sync-all:
	$(MAKE_CMD) -C $(POSTGRES) mode-sync-all
postgres-mode-sync-one:
	$(MAKE_CMD) -C $(POSTGRES) mode-sync-one
postgres-mode-status:
	$(MAKE_CMD) -C $(POSTGRES) mode-status
# Testing and Monitoring
postgres-test:
	$(MAKE_CMD) -C $(POSTGRES) test
postgres-backup:
	$(MAKE_CMD) -C $(POSTGRES) backup
postgres-monitor:
	$(MAKE_CMD) -C $(POSTGRES) monitor
postgres-log-cont:
	$(MAKE_CMD) -C $(POSTGRES) log-cont
postgres-list-db:
	$(MAKE_CMD) -C $(POSTGRES) list-db
postgres-list-tables:
	$(MAKE_CMD) -C $(POSTGRES) list-tables
postgres-show-table:
	$(MAKE_CMD) -C $(POSTGRES) show-table
# Emergency Operations
postgres-promote-slave1:
	$(MAKE_CMD) -C $(POSTGRES) promote-slave1
postgres-promote-slave2:
	$(MAKE_CMD) -C $(POSTGRES) promote-slave2
postgres-check-master:
	$(MAKE_CMD) -C $(POSTGRES) check-master
postgres-check-lag:
	$(MAKE_CMD) -C $(POSTGRES) check-lag
# Auto Failover
postgres-pgauto-up:
	$(MAKE_CMD) -C $(POSTGRES) pgauto-up
postgres-pgauto-down:
	$(MAKE_CMD) -C $(POSTGRES) pgauto-down
postgres-pgauto-status:
	$(MAKE_CMD) -C $(POSTGRES) pgauto-status
postgres-pgauto-status-sync:
	$(MAKE_CMD) -C $(POSTGRES) pgauto-status-sync
postgres-pgauto-monitor:
	$(MAKE_CMD) -C $(POSTGRES) pgauto-monitor
postgres-pgauto-purge:
	$(MAKE_CMD) -C $(POSTGRES) pgauto-purge
postgres-clean-all:
	$(MAKE_CMD) -C $(POSTGRES) clean-all

# ========================
# RABBITMQ
# ========================

RABBITMQ = providers/rabbitmq

.PHONY: rabbitmq-up rabbitmq-logs rabbitmq-stop rabbitmq-restart rabbitmq-rm rabbitmq-down rabbitmq-ps rabbitmq-exec

rabbitmq-up:
	$(MAKE_CMD) -C $(RABBITMQ) up
rabbitmq-logs:
	$(MAKE_CMD) -C $(RABBITMQ) logs
rabbitmq-stop:
	$(MAKE_CMD) -C $(RABBITMQ) stop
rabbitmq-restart:
	$(MAKE_CMD) -C $(RABBITMQ) restart
rabbitmq-rm:
	$(MAKE_CMD) -C $(RABBITMQ) rm
rabbitmq-down:
	$(MAKE_CMD) -C $(RABBITMQ) down
rabbitmq-ps:
	$(MAKE_CMD) -C $(RABBITMQ) ps
rabbitmq-exec:
	$(MAKE_CMD) -C $(RABBITMQ) exec

# ========================
# REDIS
# ========================

REDIS = providers/redis

.PHONY: redis-up redis-logs redis-stop redis-restart redis-rm redis-down redis-ps redis-exec

redis-up:
	$(MAKE_CMD) -C $(REDIS) up
redis-logs:
	$(MAKE_CMD) -C $(REDIS) logs
redis-stop:
	$(MAKE_CMD) -C $(REDIS) stop
redis-restart:
	$(MAKE_CMD) -C $(REDIS) restart
redis-rm:
	$(MAKE_CMD) -C $(REDIS) rm
redis-down:
	$(MAKE_CMD) -C $(REDIS) down
redis-ps:
	$(MAKE_CMD) -C $(REDIS) ps
redis-exec:
	$(MAKE_CMD) -C $(REDIS) exec

# ========================
# PROMTAIL
# ========================

PROMTAIL = providers/promtail

promtail-up:
	$(MAKE_CMD) -C $(PROMTAIL) up
promtail-logs:
	$(MAKE_CMD) -C $(PROMTAIL) logs
promtail-stop:
	$(MAKE_CMD) -C $(PROMTAIL) stop
promtail-restart:
	$(MAKE_CMD) -C $(PROMTAIL) restart
promtail-rm:
	$(MAKE_CMD) -C $(PROMTAIL) rm
promtail-down:
	$(MAKE_CMD) -C $(PROMTAIL) down
promtail-ps:
	$(MAKE_CMD) -C $(PROMTAIL) ps
promtail-exec:
	$(MAKE_CMD) -C $(PROMTAIL) exec

# ========================
# LOKI
# ========================

LOKI = providers/loki

loki-up:
	$(MAKE_CMD) -C $(LOKI) up
loki-logs:
	$(MAKE_CMD) -C $(LOKI) logs
loki-stop:
	$(MAKE_CMD) -C $(LOKI) stop
loki-restart:
	$(MAKE_CMD) -C $(LOKI) restart
loki-rm:
	$(MAKE_CMD) -C $(LOKI) rm
loki-down:
	$(MAKE_CMD) -C $(LOKI) down
loki-ps:
	$(MAKE_CMD) -C $(LOKI) ps
loki-exec:
	$(MAKE_CMD) -C $(LOKI) exec

# ========================
# GRAFANA
# ========================

GRAFANA = providers/grafana

grafana-up:
	$(MAKE_CMD) -C $(GRAFANA) up
grafana-logs:
	$(MAKE_CMD) -C $(GRAFANA) logs
grafana-stop:
	$(MAKE_CMD) -C $(GRAFANA) stop
grafana-restart:
	$(MAKE_CMD) -C $(GRAFANA) restart
grafana-rm:
	$(MAKE_CMD) -C $(GRAFANA) rm
grafana-down:
	$(MAKE_CMD) -C $(GRAFANA) down
grafana-ps:
	$(MAKE_CMD) -C $(GRAFANA) ps
grafana-exec:
	$(MAKE_CMD) -C $(GRAFANA) exec