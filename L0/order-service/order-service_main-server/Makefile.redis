MAKEFLAGS += --no-print-directory

REDIS_IMAGE ?= redis:latest
REDIS_CONTAINER_NAME=redis-order-service
REDIS_PORT=6379
MAXMEMORY=1024mb
MAXMEMORY_POLICY=allkeys-lru

STARTUP_TIMEOUT := 30

.PHONY: up down clean logs

up:
	@if docker ps -a --filter "name=$(REDIS_CONTAINER_NAME)" --format '{{.Status}}' | grep -q "Exited"; then \
		echo "Restarting existing stopped Redis container..."; \
		docker start $(REDIS_CONTAINER_NAME); \
	elif ! docker ps -a --filter "name=$(REDIS_CONTAINER_NAME)" | grep -q $(REDIS_CONTAINER_NAME); then \
		echo "Starting new Redis container..."; \
		docker run -d \
			--name $(REDIS_CONTAINER_NAME) \
			-p $(REDIS_PORT):6379 \
			$(REDIS_IMAGE) \
			redis-server \
			--maxmemory $(MAXMEMORY) \
			--maxmemory-policy $(MAXMEMORY_POLICY) \
			--save "" \
			--appendonly no; \
	else \
		echo "Redis container is already running"; \
		exit 0; \
	fi

	@echo "Waiting for Redis to be available (timeout: $(STARTUP_TIMEOUT)s)..."
	@timeout $(STARTUP_TIMEOUT) sh -c \
	  'until docker exec $(REDIS_CONTAINER_NAME) redis-cli ping 2>/dev/null | grep -q PONG; do \
	     sleep 1; \
	   done' || \
	   (echo "Redis failed to respond to ping within $(STARTUP_TIMEOUT) seconds"; exit 1)

	

down:
	@echo "Stopping Redis container..."
	@-docker stop $(REDIS_CONTAINER_NAME)
	@echo "Redis container stopped"

clean: down
	@echo "Performing full cleanup Redis..."
	@-docker stop $(REDIS_CONTAINER_NAME) 2>/dev/null
	@-docker rm -f $(REDIS_CONTAINER_NAME) 2>/dev/null || true
	@echo "Cleanup Redis completed"

logs:
	@docker logs -f $(REDIS_CONTAINER_NAME)